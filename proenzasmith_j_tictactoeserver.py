"""
Jacob Proenza-Smith
Team Members: Jacob Proenza-Smith (myself)
10/29/2024
Due: 10/30/2024
This project aims to use a networking library called socket to connect a client to a server. 
The client and server have a loop of writing/reading and then handling the data sent. 
This specific project accomplished a tictactoe server where a client may connect and immedietely play a game.
Assumptions: You can assume that the players take turns to the end of the game nicely. If other
situations such as players making moves out of order or client/server crashing/losing
connection in the middle of the game, the program's behavior can be non-deterministic
All work below was performed solely by Jacob Proenza-Smith
I used code generated by an AI tool for this line of code:
print(f"{row_labels[i]} {' '.join(row)}")
"""


from socket import *
import sys



def print_grid(grid):
    print("  1 2 3")
    
    row_labels = ['A', 'B', 'C']
    for i, row in enumerate(grid):
        print(f"{row_labels[i]} {' '.join(row)}")

def valid_move(move, grid):
    validMs = ["A1", "A2", "A3", "B1", "B2", "B3", "C1", "C2", "C3"]
    
    if move not in validMs:
        return False
    
    row = move[0]
    if row == 'A':
        row = 0
    elif row == 'B':
        row = 1
    elif row == 'C':
        row = 2
    else:
        return False 
    
    col = move[1]
    if col == '1':
        col = 0
    elif col == '2':
        col = 1
    elif col == '3':
        col = 2
    else:
        return False 
    
    if grid[row][col] != "*":
        return False  
    
    return True

def checkGameState(grid):
    for row in grid:
        if row[0] == row[1] == row[2] and row[0] != "*":
            return "Winner"  
    for col in range(3):
        if grid[0][col] == grid[1][col] == grid[2][col] and grid[0][col] != "*":
            return "Winner"  
    if grid[0][0] == grid[1][1] == grid[2][2] and grid[0][0] != "*":
        return "Winner"  

    if grid[0][2] == grid[1][1] == grid[2][0] and grid[0][2] != "*":
        return "Winner"  
    for row in grid:
        if "*" in row:
            return "Ongoing" 
    return "Tie"

def format_grid(grid):
    grid_str = "  1 2 3\n"
    row_labels = ['A', 'B', 'C']
    for i, row in enumerate(grid):
        grid_str += f"{row_labels[i]} {' '.join(row)}\n"
    return grid_str

def tictactoe(move, grid, player):
    row = move[0]
    if row == 'A':
        row = 0
    elif row == 'B':
        row = 1
    elif row == 'C':
        row = 2
    else:
        return "Invalid Space"
    col = move[1]
    if col == '1':
        col = 0
    elif col == '2':
        col = 1
    elif col == '3':
        col = 2
    else:
        return "Invalid Space"
    if player % 2 == 1:
        if grid[row][col] == "X" or grid[row][col] == "O":
            return "Invalid Space"
        grid[row][col] = "X"
    else:
        if grid[row][col] == "X" or grid[row][col] == "O":
            return "Invalid Space"
        grid[row][col] = "O"

    return grid

if __name__ == "__main__":
    n = len(sys.argv)
    if (n != 2):
        print("Usage: server_port")
        exit()

    s = socket()
    h = gethostname()
    print(sys.argv[0], sys.argv[1])
    
    s.bind((h, int(sys.argv[1])))
    s.listen(5)

    while True:
        print("\nWaiting for New opponent to connect")
        conn, addr = s.accept()
        grid = [["*" for _ in range(3)] for _ in range(3)]
        print(f"Connected to client {addr}")
        print("You are Player 2")
        print("Waiting for Opponents Move DONT TOUCH ANYTHING")
        print_grid(grid)
        player = 1
        
        while True:
            data = conn.recv(1024).decode()
            if data == "Q" or data == "q":
                print("Client disconnected.")
                conn.close()
                break
            data = data.upper()
            if valid_move(data, grid):
                grid = tictactoe(data, grid, player=1)
                game_state = checkGameState(grid)
                if game_state == "Winner":
                    response = f"Player 1 has won!\n" + format_grid(grid)
                    print(response)
                    break
                elif game_state == "Tie":
                    response = "The game is a tie!\n" + format_grid(grid)
                    print(response)
                    break
                else:
                    premove = format_grid(grid)
                    print(premove)
                    while True:
                        servMove = input("Enter a valid move (Enter a move([ABC][123]): ")
                        servMove = servMove.upper()
                        if valid_move(servMove, grid) == False:
                            print("Invalid move")
                            continue
                        break
                    
                    grid = tictactoe(servMove, grid, player=2)
                    game_state = checkGameState(grid)
                    
                    if game_state == "Winner":
                        response = f"Player 2 has won!\n" + format_grid(grid)
                        print(response)
                        conn.sendall(servMove.encode())
                        break
                    elif game_state == "Tie":
                        response = "The game is a tie!\n" + format_grid(grid)
                        print(response)
                        conn.sendall(servMove.encode())
                        break
                    else:
                        response = format_grid(grid)
                        print(response)
                        print("Waiting for Opponents Move DONT TOUCH ANYTHING")
                        conn.sendall(servMove.encode())
            else:
                response = "Invalid move. Try again.\n" + format_grid(grid)
    